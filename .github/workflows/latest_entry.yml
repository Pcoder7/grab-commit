# ====================================================================
#              Automated Audit of Latest Workflow Commit
#
# This version has been corrected to use job-level environment
# variables for better scoping and clarity, as requested.
# ====================================================================

name: "Automated Audit: Extract Latest Recon Data"

on:
  workflow_run:
    workflows: ["permutate.yml"]
    types:
      - completed
      
  workflow_dispatch:
      

jobs:
  extract_latest_commit_data:
    # Only run if the triggering workflow was a success.
    #if: github.event.workflow_run.conclusion == 'success'
    
    name: Extract Data From Latest Commit
    runs-on: ubuntu-latest
    env:
      STORE_OWNER: ${{ secrets.SECONDRY_USERNAME }}
      STORE_REPO_NAME: ${{ secrets.STORE }}
      STORE_TOKEN: ${{ secrets.PAT_FOR_SECONDRY }}

    steps:
      # Step 1: Checkout the private 'store-recon' repository.
      # This step correctly uses the job-level environment variables.
      - name: Checkout the private store-recon repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.STORE_OWNER }}/${{ env.STORE_REPO_NAME }}
          token: ${{ env.STORE_TOKEN }}
          fetch-depth: 0

      # Step 2: Find the single most recent commit and extract its data.
      - name: Extract New Entries by Comparing Before/After
        shell: bash
        run: |
          # capture what we currently have
          OLD_HEAD=$(git rev-parse HEAD)

          # grab the run’s head_sha or, on manual, just re‑fetch origin/main
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            NEW_HEAD="${{ github.event.workflow_run.head_sha }}"
            echo "▶️ workflow_run → diffing ${OLD_HEAD} → ${NEW_HEAD}"
            git fetch --no-tags origin "${NEW_HEAD}"
            git checkout "${NEW_HEAD}"
          else
            # manual runs: update main and use its tip
            echo "▶️ manual dispatch → diffing ${OLD_HEAD} → origin/main"
            git fetch --no-tags origin main
            NEW_HEAD=$(git rev-parse origin/main)
            git checkout "${NEW_HEAD}"
          fi

          # now diff old → new with zero context, grab only added lines
          git diff "${OLD_HEAD}" "${NEW_HEAD}" --unified=0 \
            | grep '^\+' \
            | grep -v '^\+\+\+' \
            > latest_entries.txt || true

          COUNT=$(wc -l < latest_entries.txt)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::No added lines between ${OLD_HEAD} and ${NEW_HEAD}"
            exit 1
          fi

          echo "✅ Found $COUNT new entries"



          echo "✅ Found $COUNT new entries in $COMMIT"

    

          #git show -m "$LATEST_COMMIT_HASH" | grep '^\+' | grep -v '^\+\+\+' > latest_entries.txt || true

         
          echo "Total new entries found: $(wc -l < latest_entries.txt)"

      # Step 3: Upload the extracted data as a downloadable artifact.
      - name: Upload Latest Entries as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "new-entries-from-run-${{ github.event.workflow_run.id }}"
          path: latest_entries.txt
          retention-days: 1

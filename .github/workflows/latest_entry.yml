# ====================================================================
#              Automated Audit of Latest Workflow Commit
#
# This version has been corrected to use job-level environment
# variables for better scoping and clarity, as requested.
# ====================================================================

name: "Automated Audit: Extract Latest Recon Data"

on:
  workflow_run:
    workflows: ["permutate.yml"]
    types:
      - completed
      
  workflow_dispatch:
      

jobs:
  extract_latest_commit_data:
    # Only run if the triggering workflow was a success.
    #if: github.event.workflow_run.conclusion == 'success'
    
    name: Extract Data From Latest Commit
    runs-on: ubuntu-latest
    env:
      STORE_OWNER: ${{ secrets.SECONDRY_USERNAME }}
      STORE_REPO_NAME: ${{ secrets.STORE }}
      STORE_TOKEN: ${{ secrets.PAT_FOR_SECONDRY }}

    steps:
      # Step 1: Checkout the private 'store-recon' repository.
      # This step correctly uses the job-level environment variables.
      - name: Checkout the private store-recon repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.STORE_OWNER }}/${{ env.STORE_REPO_NAME }}
          token: ${{ env.STORE_TOKEN }}
          fetch-depth: 0

      # Step 2: Find the single most recent commit and extract its data.

      # Step 2: Extract New Entries via git diff
      - name: Extract New Entries via git diff
        shell: bash
        run: |
          
          PATTERN="feat: Add new assets from distributed permutation scan"

          # Block 1: Find the target commit hash
          echo "::group::[DEBUG] Block 1: Finding Commit"
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            COMMIT="${{ github.event.workflow_run.head_sha }}"
            echo "▶️ Trigger is 'workflow_run'. Inspecting commit: $COMMIT"
            git fetch --no-tags origin "$COMMIT"
          else
            echo "▶️ Trigger is 'workflow_dispatch'. Finding latest commit with pattern: '$PATTERN'"
            COMMIT=$(git log --no-merges --grep="$PATTERN" -n1 --format="%H")
            if [ -z "$COMMIT" ]; then
              echo "::error::No commit found matching '$PATTERN'"
              exit 1
            fi
            echo "   → Found commit: $COMMIT"
          fi
          echo "::endgroup::"

          # Block 2: Generate the raw diff using the most robust method
          echo "::group::[DEBUG] Block 2: Generating Raw Diff"
          # We must handle the edge case where the commit is the very first one (has no parent)
          if git rev-parse --verify $COMMIT^ >/dev/null 2>&1; then
            # This is a normal commit with a parent. Diff against the parent.
            echo "Commit has a parent. Using 'git diff $COMMIT^ $COMMIT' for explicit comparison."
            git diff "$COMMIT^" "$COMMIT" --unified=0 > raw_diff.log
          else
            # This is the first commit in the repository. Its "diff" is all of its content.
            echo "Commit is the first commit (no parent). Using 'git show' to display its content."
            git show "$COMMIT" --unified=0 > raw_diff.log
          fi
          echo "--- Contents of raw_diff.log (This is what will be filtered) ---"
          cat raw_diff.log
          echo "--- End of raw_diff.log ---"
          echo "::endgroup::"
          
          # Block 3: Filter the raw diff and create the final file
          echo "::group::[DEBUG] Block 3: Filtering Diff"
          echo "Filtering raw diff for lines starting with '+'..."
          cat raw_diff.log \
            | grep '^\+' --color=never \ 
            > latest_entries.txt || true
          echo "--- Contents of latest_entries.txt (The final result) ---"
          cat latest_entries.txt
          echo "--- End of file contents ---"
          echo "::endgroup::"

          # Block 4: Count the lines and validate
          echo "::group::[DEBUG] Block 4: Final Validation"
          COUNT=$(wc -l < latest_entries.txt)
          echo "Final line count is: $COUNT"
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::No added lines were found after filtering the diff from commit $COMMIT."
            echo "Inspect '[DEBUG] Block 2' to see the raw diff that was processed."
            exit 1
          fi
          echo "Validation successful."
          echo "::endgroup::"

          echo "✅ Found $COUNT new entries in $COMMIT"

    

          #git show -m "$LATEST_COMMIT_HASH" | grep '^\+' | grep -v '^\+\+\+' > latest_entries.txt || true

      # Step 3: Upload the extracted data as a downloadable artifact.
      - name: Upload Latest Entries as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "new-entries-from-run-${{ github.event.workflow_run.id }}"
          path: latest_entries.txt
          retention-days: 1

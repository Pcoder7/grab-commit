# ====================================================================
#              Automated Audit of Latest Workflow Commit
#
# This version has been corrected to use job-level environment
# variables for better scoping and clarity, as requested.
# ====================================================================

name: "Automated Audit: Extract Latest Recon Data"

on:
  workflow_run:
    workflows: ["permutate.yml"]
    types:
      - completed
      
  workflow_dispatch:
      

jobs:
  extract_latest_commit_data:
    # Only run if the triggering workflow was a success.
    #if: github.event.workflow_run.conclusion == 'success'
    
    name: Extract Data From Latest Commit
    runs-on: ubuntu-latest
    env:
      STORE_OWNER: ${{ secrets.SECONDRY_USERNAME }}
      STORE_REPO_NAME: ${{ secrets.STORE }}
      STORE_TOKEN: ${{ secrets.PAT_FOR_SECONDRY }}

    steps:
      # Step 1: Checkout the private 'store-recon' repository.
      # This step correctly uses the job-level environment variables.
      - name: Checkout the private store-recon repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.STORE_OWNER }}/${{ env.STORE_REPO_NAME }}
          token: ${{ env.STORE_TOKEN }}
          fetch-depth: 0

      # Step 2: Configure Git to disable color output for this job

      - name: Configure Git for Scripting
        run: git config --global color.ui never
        
      # Step 3: Find the single most recent commit and extract its data
      - name: Extract Latest Entries from Target Files
        id: extract_entries
        shell: bash
        run: |
          set -e
          # --- Configuration ---
          # The commit message to search for
          PATTERN="Automated results from Secondary Account"
          # The path pattern to find the target files using a wildcard (*)
          TARGET_PATHSPEC="results/*/httpx_result.txt"

          # --- Block 1: Finding the Commit (Unchanged) ---
          printf "::group::[DEBUG] Block 1: Finding Commit\n"
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            COMMIT="${{ github.event.workflow_run.head_sha }}"
          else
            COMMIT=$(git log --no-merges --grep="$PATTERN" -n1 --format="%H")
          fi
          if [ -z "$COMMIT" ]; then
            printf "::error::No commit found matching '$PATTERN'\n"
            exit 1
          fi
          echo "   → Found commit: $COMMIT"
          printf "::endgroup::\n"

          # --- Block 2: Generating a Targeted Raw Diff using a Pathspec (Modified) ---
          printf "::group::[DEBUG] Block 2: Generating Raw Diff for paths matching '$TARGET_PATHSPEC'\n"
          # We provide the wildcard pathspec to git. It will find ALL files matching
          # this pattern that were changed in the commit and create a combined diff.
          if git rev-parse --verify $COMMIT^ >/dev/null 2>&1; then
            git diff "$COMMIT^" "$COMMIT" --unified=0 -- "$TARGET_PATHSPEC" > raw_diff.log || true
          else
            git show "$COMMIT" --unified=0 -- "$TARGET_PATHSPEC" > raw_diff.log || true
          fi
          printf "::endgroup::\n"
          
          # --- Block 3: Filtering Diff (Unchanged) ---
          # This filtering logic does not need to change. It will correctly process
          # the combined diff from all the matched files.
          printf "::group::[DEBUG] Block 3: Filtering Diff\n"
          grep '^\+' raw_diff.log --color=never | grep -vE '^\+\+\+' --color=never |  awk -F' ' '{print $1}' | awk '{for(i=1;i<=NF;i++){gsub(/^\+/, "", $i); print $i}}' > latest_entries.txt || true
          printf "::endgroup::\n"

          # --- Block 4: Final Validation (Updated for clarity) ---
          printf "::group::[DEBUG] Block 4: Final Validation\n"
          COUNT=$(wc -l < latest_entries.txt)
          if [ "$COUNT" -eq 0 ]; then
            # The error message now correctly references the pattern, not a single file.
            printf "::error::No added content lines were found in files matching '%s' from commit %s.\n" "$TARGET_PATHSPEC" "$COMMIT"
            exit 1
          fi
          echo "✅ Successfully extracted $COUNT new entries from files matching '$TARGET_PATHSPEC' into latest_entries.txt"
          printf "::endgroup::\n"

    

          #git show -m "$LATEST_COMMIT_HASH" | grep '^\+' | grep -v '^\+\+\+' > latest_entries.txt || true

      # Step 3: Upload the extracted data as a downloadable artifact.
      - name: Upload Latest Entries as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "new-entries-from-run-${{ github.event.workflow_run.id }}"
          path: latest_entries.txt
          retention-days: 1

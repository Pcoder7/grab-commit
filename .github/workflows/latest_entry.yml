# ====================================================================
#              Automated Audit of Latest Workflow Commit
#
# This version has been corrected to use job-level environment
# variables for better scoping and clarity, as requested.
# ====================================================================

name: "Automated Audit: Extract Latest Recon Data"

on:
  workflow_run:
    workflows: ["permutate.yml"]
    types:
      - completed
      
  workflow_dispatch:
      

jobs:
  extract_latest_commit_data:
    # Only run if the triggering workflow was a success.
    #if: github.event.workflow_run.conclusion == 'success'
    
    name: Extract Data From Latest Commit
    runs-on: ubuntu-latest
    env:
      STORE_OWNER: ${{ secrets.SECONDRY_USERNAME }}
      STORE_REPO_NAME: ${{ secrets.STORE }}
      STORE_TOKEN: ${{ secrets.PAT_FOR_SECONDRY }}

    steps:
      # Step 1: Checkout the private 'store-recon' repository.
      # This step correctly uses the job-level environment variables.
      - name: Checkout the private store-recon repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.STORE_OWNER }}/${{ env.STORE_REPO_NAME }}
          token: ${{ env.STORE_TOKEN }}
          fetch-depth: 0

      # Step 2: Configure Git to disable color output for this job

      - name: Configure Git for Scripting
        run: git config --global color.ui never
        
      # Step 3: Find the single most recent commit and extract its data
      - name: Extract Latest Entries from Target Files
        id: extract_entries
        shell: bash
        run: |
          set -e

          
          # --- Block 1: Dynamically Find the Latest Correlation ID ---
          printf "::group::[DEBUG] Block 1: Discovering the latest Correlation ID\n"
          
          # First, find the full commit message of the MOST RECENT commit that matches the general pattern.
          # We use `--format=%B` to get the entire message body.
          LATEST_COMMIT_MESSAGE=$(git log --no-merges --grep="Update from Correlation ID:" -n1 --format=%B)
          
          if [ -z "$LATEST_COMMIT_MESSAGE" ]; then
            printf "::error::Could not find any commits matching the pattern 'Update from Correlation ID:'.\n"
            exit 1
          fi

          # Second, from that message, extract JUST the ID number.
          # We grep for the specific line and then print the last field.
          CORRELATION_ID=$(echo "$LATEST_COMMIT_MESSAGE" | grep -iE "Update from Correlation ID:" --color=never | awk '{print $NF} || true')
          
          if [ -z "$CORRELATION_ID" ]; then
            printf "::error::Found a commit, but could not parse the Correlation ID from its message.\n"
            echo "Message was: $LATEST_COMMIT_MESSAGE"
            exit 0
          fi

          echo "   → Discovered latest Correlation ID: $CORRELATION_ID"
          printf "::endgroup::\n"

          # --- Configuration ---
          # The PATTERN is now built dynamically using the ID we just discovered.
          PATTERN="Update from Correlation ID: ${CORRELATION_ID}"
          TARGET_PATHSPEC="results/*/httpx_result.txt"
          
          # --- Block 2: Finding the Full Commit RANGE Using the Discovered ID ---
          printf "::group::[DEBUG] Block 2: Finding all commits with Correlation ID: %s\n" "$CORRELATION_ID"
          
          COMMIT_HASHES=$(git log --no-merges --grep="$PATTERN" --format="%H")
          
          if [ -z "$COMMIT_HASHES" ]; then
            # This is a sanity check, but should not be hit if Block 1 succeeded.
            printf "::error::No commits found with the specific Correlation ID '%s'.\n" "$CORRELATION_ID"
            exit 0
          fi

          NEWEST_COMMIT=$(echo "$COMMIT_HASHES" | head -n1)
          OLDEST_COMMIT=$(echo "$COMMIT_HASHES" | tail -n1)

          echo "   → Found a batch of related commits."
          echo "   → Newest commit in batch: $NEWEST_COMMIT"
          echo "   → Oldest commit in batch: $OLDEST_COMMIT"
          printf "::endgroup::\n"

          # --- Block 3: Generating a Targeted Raw Diff for the ENTIRE RANGE ---
          printf "::group::[DEBUG] Block 3: Generating raw diff for the full range\n"
          
          # This logic is robust and does not need to change.
          if git rev-parse --verify "$OLDEST_COMMIT^" >/dev/null 2>&1; then
            git diff "${OLDEST_COMMIT}^" "$NEWEST_COMMIT" --unified=0 -- "$TARGET_PATHSPEC" > raw_diff.log || true
          else
            git show "$NEWEST_COMMIT" --unified=0 -- "$TARGET_PATHSPEC" > raw_diff.log || true
          fi
          
          echo "   → Diff generated by comparing from before commit $OLDEST_COMMIT up to commit $NEWEST_COMMIT"
          printf "::endgroup::\n"
          
          # --- Block 4: Filtering Diff (No changes needed) ---
          printf "::group::[DEBUG] Block 4: Filtering Diff for added lines\n"
          grep '^\+' raw_diff.log --color=never | grep -vE '^\+\+\+' --color=never | awk -F' ' '{print $1}' | awk '{for(i=1;i<=NF;i++){gsub(/^\+/, "", $i); print $i}}' > latest_entries.txt || true
          printf "::endgroup::\n"
          
          # --- Block 5: Final Validation ---
          printf "::group::[DEBUG] Block 5: Final Validation\n"
          COUNT=$(wc -l < latest_entries.txt)
          if [ "$COUNT" -eq 0 ]; then
            printf "::error::No new content lines were found in the commit batch for Correlation ID '%s'.\n" "$CORRELATION_ID"
            exit 1
          fi
          echo "✅ Successfully extracted $COUNT new entries from the commit batch into latest_entries.txt"
          printf "::endgroup::\n"
    

          #git show -m "$LATEST_COMMIT_HASH" | grep '^\+' | grep -v '^\+\+\+' > latest_entries.txt || true

      # Step 3: Upload the extracted data as a downloadable artifact.
      - name: Upload Latest Entries as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "new-entries-from-run-${{ github.event.workflow_run.id }}"
          path: latest_entries.txt
          retention-days: 1
